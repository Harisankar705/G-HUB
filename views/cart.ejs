<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>G-HUB</title>

    <meta name="author" content="Untree.co">
    <meta name="description" content="">
    <meta name="keywords" content="bootstrap, bootstrap4">

    <!-- Bootstrap CSS -->
    <link href="../assets/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="../assets/css/tiny-slider.css" rel="stylesheet">
    <link href="../assets/css/stylee.css" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

</head>
<body>

    <!-- Start Header/Navigation -->
    <nav class="custom-navbar navbar navbar-expand-md navbar-dark bg-dark" aria-label="Furni navigation bar">
        <div class="container">
            <a class="navbar-brand" href="#">G-HUB<span>.</span></a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsFurni"
                aria-controls="navbarsFurni" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarsFurni">
                <ul class="custom-navbar-nav navbar-nav ms-auto mb-2 mb-md-0">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/home">Shop</a>
                    </li>
                </ul>
                <ul class="custom-navbar-cta navbar-nav mb-2 mb-md-0 ms-5">
                    <li><a class="nav-link" href="/userprofile/<%= user._id %>"><i class="fa fa-user"></i></a></li>
                    <li><a class="nav-link" href="/cart"><i class="fa fa-shopping-cart"></i></a></li>
                    <li><a class="nav-link" href="/wishlist"><i class="fa fa-heart" aria-hidden="true"></i></a></li>
                    <li><a class="nav-link" href="/userWallet/<%=user._id%>"><i class="fa-solid fa-wallet"></i></a></li>
                    <li><a class="nav-link" href="/customer-support"><i class="fa-solid fa-headphones"></i></a></li>

                    <li><a class="nav-link" href=""><i></i></a></li>
					<form action="/logout" method="POST">
						<button type="submit" class="nav-link" style="border: none; background: none; cursor: pointer;">
							<i class="fa fa-sign-out"></i>
						</button>
					</form>
                </ul>
            </div>
        </div>
    </nav>
    <!-- Start Footer Section -->
    <footer class="footer-section">
        <div class="container relative">
            <section class="cart_area">
                <div class="container">
                    <div class="cart_inner">
                        <div class="table-responsive">
                            <table class="table">
                                <% if (products.length>0) { %>
                                    <thead>
                                        <tr>
                                            <th scope="col">Product</th>
                                            <th scope="col">Name</th>
                                        
                                            <th scope="col">Price</th>
                                            <th scope="col">Quantity</th>
                                            <th scope="col">Remove</th>
                                            <th>
                                            <th scope="col">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% for( let i=0; i < products.length; i++ ) { %>
                                            <tr>
        
                                                <td>
                                                    <div class="media">
                                                        <div style="height:50px; width: 50px;" class="d-flex">
                                                            <img src="/<%= products[i].productId.mainimage%>" alt="">
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="media-body">
                                                        <p>
                                                            <%= products[i].productId.name %>
                                                        </p>
                                                    </div>
                                                </td>
                    
                                                <td>
                                                    <% if (products[i].productId.discount) { %>
                                                        <% const finalPrice = products[i].productId.price.toFixed(); %>
                                                        <h5>&#x20B9; <span class="productPrice"><%- finalPrice %></span></h5>
                                                    <% } else { %>
                                                        <h5>&#x20B9; <span class="productPrice"><%- products[i].productId.price %></span></h5>
                                                    <% } %>
                                                </td>
                                                
                                                <td>
                                                    <div class="product_count">
                                                       <!-- Inside the loop where you display products -->
                                                       <input type="number" name="qty" id="sst" maxlength="10" data-product-id="<%= products[i].productId._id %>" value="<%= products[i].quantity %>" title="Quantity:" class="input-text qty" readonly>


        
                                                        <!-- Buttons to increase and decrease quantity -->
                                                        <button class="increase items-count" type="button" onclick="increaseQuantity(this)">
                                                            <i class="fa fa-plus"></i>
                                                        </button>
                                                        <button class="reduced items-count" type="button" onclick="decreaseQuantity(this, '<%= products[i].productId._id %>',' <%= products[i].quantity %>', '<%= products[i].size %>')">
                                                            <i class="fa fa-minus"></i>
                                                        </button>
                                                        
                                                        
                                                        
                                                        
                                                    </div>
                                                </td>
                                                <td>
                                                    <!-- Delete Icon -->
                                                    <a href="" style="text-decoration: none; color: black;"
                                                        class="removeProduct" data-productId="<%= products[i].productId._id %>">
                                                        <i class="fa fa-trash"></i>                                                   </button>
                                                    </a>
                                                </td>
                                                <td>
                                                    <h5>&#x20B9; <span class="total-price"><%= (Number(products[i].productId.price) * Number(products[i].quantity)).toFixed() %></span></h5>
                                                </td>
                                                
        
                                            </tr>
                                            <% } %>
                                                <tr>
                                                    <td>
        
                                                    </td>
                                                    <td>
                                                    </td>
                                                    <td>
                                                    </td>
                                                    <td>
        
                                                    </td>
                                                    <td></td>
                                                    <td>
                                                        <h5>Total</h5>
                                                    </td>
                                                    <td>
                                                        <h5> &#x20B9; <span class="cartTotal"><%- totalCart %></span>
                                                        </h5>
                                                    </td>
        
                                                </tr>
                                                <% }else{ %>
                                                    <tr>
        
                                                        <div class="col-md-12 d-flex justify-content-center">
                                                            <div style="height: 250px; width: 300px;" class="text-center mb-5">
                                                                <img src='../public/empty-cart-yellow.png'
                                                                    style="object-fit: cover; height: 100%; width: 100%;"
                                                                    alt="">
                                                                <!-- <p style="color: grey; font-size: 20px;">Your Cart is empty</p> -->
                                                            </div>
                                                        </div>
                                                    </tr>
        
                                                    <% } %>
        
                                                        <tr class="out_button_area">
                                                            <td>
        
                                                            </td>
                                                            <td>
        
                                                            </td>
                                                            <td>
        
                                                            </td>
                                                            <td>
        
                                                            </td>
                                                            <td>
                                                                <div class="checkout_btn_inner d-flex justify-content-end">
                                                                    <!-- <a class="gray_btn" href="/products">Shop</a> -->
                                                                    <a id="proceedBtn" class="primary-btn" data-productsCount="<%- products.length %>" href='/checkout'>Proceed to Checkout</a>


                                                                </div>
                                                            </td>
                                                        </tr>
                                    </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </footer>
    <%-include('partials/userfooter.ejs')%>


            <style>
                .product-thumbnail {
                height: 200px; /* Set your desired height for the product images */
                width: auto; /* Maintain the aspect ratio */
                object-fit: cover; /* Ensure the image covers the entire container */
                }
                /* Add a custom style for the dropdown */
                /* Set the text color for dropdown items */
                .dropdown-item  {
                color: #000000 !important;
                }
            </style>
            <style>
                #back-button {
  width: 30px;
  margin-left: 10px;
}
    .cart_inner .table {
        border: 1px solid #e6e6e6;
        border-radius: 5px;
    }

    .cart_inner .table th, .cart_inner .table td {
        border: 1px solid #e6e6e6;
    }

    .cart_inner .table thead th {
        background-color: #f8f9fa;
    }

    .cart_inner .table tbody td {
        vertical-align: middle;
    }

    /* Style for the "Total" row */
    .cart_inner .table tbody tr:last-child {
        background-color: #f8f9fa;
    }

    .cart_inner .table tbody tr:last-child h5 {
        font-weight: bold;
    }

    /* Style for the "Proceed to Checkout" button */
    #proceedBtn {
        background-color: #007bff;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    #proceedBtn:hover {
        background-color: #0056b3;
    }

    /* Style for the "Remove" button */
    .removeProduct {
        color: #dc3545;
        cursor: pointer;
    }

    .removeProduct:hover {
        text-decoration: underline;
    }

    /* Additional styling for the checkout button area */
    .checkout_btn_inner {
        margin-top: 20px;
    }

    .checkout_btn_inner a.gray_btn {
        background-color: #f8f9fa;
        color: #007bff;
        border: 2px solid #007bff;
        margin-right: 10px;
    }

    .checkout_btn_inner a.gray_btn:hover {
        background-color: #007bff;
        color: #ffffff;
    }

    /* Footer style for the copyright section */
    .copyright {
        padding: 20px 0;
        background-color: #f8f9fa;
        text-align: center;
        font-size: 14px;
    }

    /* Styling for the dropdown items in the navigation */
    .dropdown-menu a {
        color: #000000;
    }

    .dropdown-menu a:hover {
        background-color: #007bff;
        color: #ffffff;
    }

            </style>
            <style>
                /* Add custom style for product count buttons */
        .product_count button {
            background-color: #007bff; /* Change to your desired button color */
            color: #ffffff; /* Change to your desired text color */
            border: none;
            padding: 5px 10px;
            cursor: pointer;
        }
    
        .product_count button:hover {
            background-color: #0056b3; /* Change to your desired button hover color */
        }
    
        /* Add margin between the buttons */
        .product_count button + button {
            margin-left: 5px;
        }
    
            </style>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js" integrity="sha512-AA1Bzp5Q0K1KanKKmvN/4d3IRKVlv9PYgwFPvm32nPO6QS8yH1HO7LbgB1pgiOxPtfeg5zEn2ba64MUcqJx6CA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

        <!-- cart + summary -->
        <script>
            // Function to calculate and update the cart total
        async function changeQuantity(productId, value, currentValue, size) {
    const data = {
        proId: productId,
        quantity: value, // Use 'quantity' instead of 'count'
        currentValue: currentValue,

        
    };

    try {
        const response = await fetch(`/cart/updatequantity/${productId}`, {
            method: 'post',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
if(!response.ok)
{
    throw new Error("Failedto update")
}
        const result = await response.json();

        if (result.status === 'error') {
            console.log("REsult",result)
            Swal.fire({
                title: result.message,
                icon: 'error',
                timer: 1500
            });
            return { status: 'error' };
        } else if (result.status === 'blocked') {
            Swal.fire({
                icon: 'info',
                title: result.message,
                showConfirmButton: false,
                timer: 4000
            });
            setTimeout(() => {
                location.href = '/login';
            }, 4000);
        } else {
            return { status: 'success' };
        }
    } catch (error) {
        console.log('Error during quantity change:', error);
        return { status: 'error' };
    }
}



            function updateCartTotal() {
                const productRows = document.querySelectorAll('tbody tr'); // Get all product rows
                let cartTotal = 0;

                // Loop through each product row and calculate the total
                productRows.forEach(function (row) {
                    const quantityInput = row.querySelector('input[name="qty"]');
                    const productPriceElement = row.querySelector('.productPrice');

                    if (quantityInput && productPriceElement) {
                        const quantity = parseInt(quantityInput.value);
                        const productPrice = parseFloat(productPriceElement.textContent.replace(/[^0-9.]/g, '')); // Extract numeric value, considering decimals

                        if (!isNaN(quantity) && !isNaN(productPrice)) {
                            cartTotal += quantity * productPrice;
                        }
                    }
                });

                // Update the "cartTotal" element with the new total
                const cartTotalElement = document.querySelector('.cartTotal');
                if (cartTotalElement) {
                    cartTotalElement.textContent = ` ${cartTotal.toLocaleString('en-IN')}`; // Format as currency
                }
            }


            // Function to increase the quantity of a product
              async function increaseQuantity(inputField) {
        const currentValue = parseInt(inputField.value);
        const productId = inputField.dataset.productId;
        const size = inputField.dataset.productSize;

        if (!isNaN(currentValue)) {
            const response = await changeQuantity(productId, currentValue + 1, currentValue, size);
            if (response && response.status === 'success') {
                inputField.value = currentValue + 1;
                updateQuantity(inputField);
                updateCart(); // Update the cart total when the quantity changes
            }
        }
    }

            // Function to decrease the quantity of a product
            async function decreaseQuantity(inputField, productId, value) {
    const currentValue = parseInt(inputField.value);
    if (!isNaN(currentValue) && currentValue > 1) {
        const response = await changeQuantity(productId, currentValue - 1, currentValue);
        if (response && response.status === 'success') {
            inputField.value = currentValue - 1;
            updateQuantity(inputField);
            updateCart(); // Update the cart total when the quantity changes
        }
    }
}

            // Function to update the quantity and total price
          async  function updateQuantity(inputField,productId) {
                const container = inputField.closest('tr'); // Changed this line to get the closest table row
                const quantity = parseInt(inputField.value);
                const productPrice = parseFloat(container.querySelector('.productPrice').textContent.replace(/[^0-9.]/g, '')); // Extract numeric value, considering decimals
                const totalPriceElement = container.querySelector('.total-price');

                if (!isNaN(quantity) && !isNaN(productPrice) && totalPriceElement) {
                    const newTotal = quantity * productPrice;
                    totalPriceElement.textContent = `${newTotal.toLocaleString('en-IN')}`;
                }
            }


            // Function to update the cart after quantity changes
            function updateCart() {
                updateCartTotal(); // Update the cart total
            }

            // Get all the product count containers
            const productCountContainers = document.querySelectorAll('.product_count');

            // Loop through each container
            productCountContainers.forEach(function (container) {
        const inputField = container.querySelector('input[name="qty"]');
        const increaseButton = container.querySelector('.increase');
        const decreaseButton = container.querySelector('.reduced');
        const productId = inputField.dataset.productId;
        const productSize = inputField.dataset.productSize;

        increaseButton.addEventListener('click', function () {
            increaseQuantity(inputField, productId, 1, productSize);
        });

        decreaseButton.addEventListener('click', function () {
            decreaseQuantity(inputField, productId, -1, productSize);
        });
    });

    window.addEventListener('load', function () {
        updateCartTotal();
        toggleCheckoutButtonVisibility();
    });
        </script>

        <script>
            // When the user click into the proceed button with out any product as well as checking stock and publish
            // document.getElementById('proceedBtn').addEventListener('click', async (event) => {
            //     event.preventDefault();
            //     const productCount = parseInt(event.currentTarget.getAttribute('data-productsCount'));

            //     try {
            //         const response = await fetch('/checkstock', {
            //             method: 'GET',
            //         });

            //         if (!response.ok) {
            //             throw new Error('Failed to fetch');
            //         }

            //         const result = await response.json();

            //         if (productCount === 0) {
            //             Swal.fire({
            //                 title: 'Cart is Empty',
            //                 icon: 'error',
            //             });
            //         } else if (result.status === 'error') {
            //             Swal.fire({
            //                 icon: 'error',
            //                 title: result.message,
            //                 confirmButtonText: 'OK',
            //                 confirmButtonColor: '#3085d6',
            //                 timer: 3000,
            //                 showConfirmButton: true,
            //                 allowOutsideClick: false,
            //                 allowEscapeKey: false,
            //                 allowEnterKey: true,
            //             });
            //         } else if (result.status === 'blocked') {
            //             Swal.fire({
            //                 icon: 'info',
            //                 title: 'You have been blocked due to violations',
            //                 showConfirmButton: false,
            //                 timer: 2000
            //             })
            //             setTimeout(() => {
            //                 location.href = '/login?blocked=true'
            //             }, 2000);
            //         } else {
            //             window.location.href = '/checkout';
            //         }
            //     } catch (error) {
            //         console.error('Error during fetch:', error);
            //     }
            // });
        </script>

        <script>
            // Removing the product from cart
            const removeBtn = document.querySelectorAll('.removeProduct');
            removeBtn.forEach(btn => {
                btn.addEventListener('click', async (event) => {
                    event.preventDefault();

                    const productId = event.currentTarget.getAttribute('data-productId');
                    console.log(productId)
                    if (productId) {
                        const response = await Swal.fire({
                            title: "Are you Sure ",
                            text: "To Remove Product from Cart",
                            icon: "question",
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#990f0f',
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No'
                        });

                        if (response.isConfirmed) {
                            let url = `/cart/itemtoremove/?productId=${productId}`;

                           
                            const response = await fetch(url);
                            const result = await response.json();

                            if (result.status === 'success') {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Product Removed from Cart',
                                    showConfirmButton: false,
                                    timer: 2000
                                })
                                setTimeout(() => {
                                    location.href = location.href
                                }, 1500)
                            }
                            else if (result.status === 'blocked') {
                                Swal.fire({
                                    icon: 'info',
                                    title: result.message,
                                    showConfirmButton: false,
                                    timer: 2000,
                                    customClass: {
                                        title: 'swal'
                                    }
                                })
                                setTimeout(() => {
                                    location.href = '/login?blocked=true'
                                }, 2000);
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: result.message,
                                    showConfirmButton: false,
                                    timer: 2000
                                })
                            }
                        }
                    }

                })
            })
        </script>
        </div>
    </footer>
    <!-- End Footer Section -->
    
    <script>
        // Example using fetch for category clicks
        document.querySelectorAll('.dropdown-item').forEach(item => {
        item.addEventListener('click', (event) => {
        event.preventDefault();
        const categoryName = item.innerText; // Get category name from clicked item
        fetch(`/${categoryName}`)
        .then(response => response.text())
        .then(html => {
        document.body.innerHTML = html;
        })
        .catch(error => console.error('Error fetching category content:', error));
        });
        });
        </script>
        
        <script>
            // Function to toggle the visibility of the "Proceed to Checkout" button based on the cart content
            function toggleCheckoutButtonVisibility() {
                const proceedBtn = document.getElementById('proceedBtn');
                const productCount = parseInt(proceedBtn.getAttribute('data-productsCount'));
        
                if (productCount > 0) {
                    proceedBtn.style.display = 'block'; // Show the button
                } else {
                    proceedBtn.style.display = 'none'; // Hide the button
                }
            }
        
            // Call the function when the page loads
            window.addEventListener('load', function () {
                toggleCheckoutButtonVisibility();
            });
        
            // Update the cart total when the page loads or when the quantity changes
            window.addEventListener('load', function () {
                updateCartTotal();
                toggleCheckoutButtonVisibility();
            });
        </script>
        
    <script src="../assets/js/bootstrap.bundle.min.js"></script>
    <script src="../assets/js/tiny-slider.js"></script>
    <script src="../assets/js/custom.js"></script>
    </body>
    </html>
